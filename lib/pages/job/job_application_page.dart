import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hospal/classes/checkbox_state.dart';
import 'package:hospal/pages/user/employer/emp_home_page.dart';
import 'package:hospal/widgets/custom_button_widget.dart';
import 'package:hospal/widgets/text_nunito_widget.dart';
import 'package:hospal/widgets/text_poppins_widget.dart';
import 'package:hospal/widgets/textfield_widget.dart';
import 'package:path/path.dart';

import '../../api/user_auth.dart';
import '../../constants/style.dart';

class JobApplicationPage extends StatefulWidget {
  final String?
      docId; //Id of job document (which is already randomly generated by Firebase). NOT TO BE CONFUSED WITH JOB ID.
  // final String?
  //     jobId; //ID of Job Post in which the user would like to apply for. (May be unneeded)
  final String? employerId; //ID of the Employer user who's made the job post.
  const JobApplicationPage({Key? key, this.docId, this.employerId})
      : super(key: key);

  @override
  State<JobApplicationPage> createState() => _JobApplicationPageState();
}

class _JobApplicationPageState extends State<JobApplicationPage> {
  int currentStep = 0; //Used for Stepper Widget.

  PlatformFile? newFileToUpload;
  UploadTask? uploadTask;

  String? errorMessage;

  int selectableFiles = 4;

  bool isCompleted =
      false; //Flag to indicate that the job application has been completed.

  final fullNameController = TextEditingController();
  final emailController = TextEditingController();
  final phoneController = TextEditingController();
  final introLetterController = TextEditingController();
  final additionalInfoController = TextEditingController();
  final startDateController = TextEditingController();
  final desiredSalaryController = TextEditingController();

  String jobId = '';
  String jobTitle = '';
  String companyName = '';
  String companyAddress = '';

  String jobseekerEmail = '';
  // bool useRegisteredEmail = false;

  CheckBoxState useRegisteredEmailCB =
      CheckBoxState(title: 'Use account E-mail address instead?', value: false);

  // List<int>? filesSelected;
  List<String> fileIds = [];
  List<String> fileNames = [];
  List<String>? fileTypes;
  List<String>? fileSizes;

  List<String>? selectedFileIds;

  bool file1Selected = false;
  bool file2Selected = false;
  bool file3Selected = false;
  bool file4Selected = false;
  List<bool> filesSelected = [false, false, false, false];

  /* final */ var checkboxes = [
    CheckBoxState(title: 'file0', value: false),
    CheckBoxState(title: 'file1', value: false),
    CheckBoxState(title: 'file2', value: false),
    CheckBoxState(title: 'file3', value: false),
    CheckBoxState(title: 'file4', value: false),
  ];

  int fileCounter = 0;

  List<String> filesToUpload = []; //TODO: remove if unused. (Max: 4)

  bool openFileStorage = false;

  @override
  void initState() {
    super.initState();
    fullNameController.addListener(() => setState(() {}));
    emailController.addListener(() => setState(() {}));
    phoneController.addListener(() => setState(() {}));
    introLetterController.addListener(() => setState(() {}));
    additionalInfoController.addListener(() => setState(() {}));
    startDateController.addListener(() => setState(() {}));
    desiredSalaryController.addListener(() => setState(() {}));
    getFilesFromStorage();
    getJobData();
  }

  getJobData() async {
    var jobCollection = FirebaseFirestore.instance.collection('jobs');
    jobCollection.doc(widget.docId).get().then((value) {
      setState(
        () {
          jobId = value.data()!['job_id'];
          jobTitle = value.data()!['job_title'];
          companyName = value.data()!['company_name'];
          companyAddress = value.data()!['company_address'];
        },
      );
    });
  }

  Future<void> getFilesFromStorage() async {
    var ref = await FirebaseFirestore.instance
        .collection('user')
        .doc(UserAuth().currentUser!.uid)
        .collection('files')
        .get();
    for (var i = 0; i < ref.docs.length; i++) {
      setState(() {
        fileIds!.add(ref.docs[i].id);
        fileNames!.add(ref.docs[i]['file_name']);
        fileTypes!.add(ref.docs[i]['file_type']);
        fileSizes!.add(ref.docs[i]['file_size']);
      });
    }
  }

  getJobseekerEmail() async {
    var jobseekerDoc = FirebaseFirestore.instance
        .collection('users')
        .doc(UserAuth().currentUser!.uid);
    jobseekerDoc.get().then((value) {
      setState(
        () {
          jobseekerEmail = value.data()!['email'];
        },
      );
    });
  }

  @override
  void dispose() {
    fullNameController.dispose();
    emailController.dispose();
    phoneController.dispose();
    introLetterController.dispose();
    additionalInfoController.dispose();
    startDateController.dispose();
    desiredSalaryController.dispose();
    super.dispose();
  }

  void clearFields() {
    fullNameController.clear();
    emailController.clear();
    phoneController.clear();
    introLetterController.clear();
    additionalInfoController.clear();
    startDateController.clear();
    desiredSalaryController.clear();
  }

  // bool checkSelectedFiles() {
  //   if (file1Selected == false) {
  //     return file1Selected;
  //   } else if (file1Selected == true && file2Selected == false) {
  //     return file2Selected;
  //   } else if (file1Selected == true &&
  //       file2Selected == true &&
  //       file3Selected == false) {
  //     return file3Selected;
  //   } else {
  //     return file4Selected;
  //   }
  // }

  Future openYourFileStorage() => showDialog(
      context: super.context,
      builder: (context) => AlertDialog(
            title: NunitoTextWidget(
              text: "File Storage",
              size: fontTitle,
              color: darkBlue,
              isBold: true,
            ),
            content: Column(
              children: [
                NunitoTextWidget(
                    text: "Please select up to 4 files you'd wish to attach.",
                    size: fontBody,
                    isBold: true,
                    color: midBlue),
                y10,
                Flexible(
                  child: SingleChildScrollView(
                    child: SizedBox(
                        height: double.maxFinite,
                        width: double.maxFinite,
                        child: buildFilesStreamBuilder()),
                  ),
                ),
              ],
            ),
          ));

  Future selectFile() async {
    final result = await FilePicker.platform.pickFiles();
    if (result == null) return;
    setState(() {
      newFileToUpload = result.files.first;
    });
  }

  //Not necessary to use (just recall files from file storage)
  Future uploadFile() async {
    try {
      final path = 'files/${widget.docId}/${newFileToUpload!.name}';
      final file = File(newFileToUpload!.path!);
      final firestoreRef = FirebaseFirestore.instance
          .collection('users')
          .doc(UserAuth().currentUser!.uid);
      //Storage File(s) upload
      final storageRef = FirebaseStorage.instance.ref().child(path);
      uploadTask = storageRef.putFile(file);
      final snapshot = await uploadTask!.whenComplete(() {});
      final urlDownload = await snapshot.ref.getDownloadURL();

      if (kDebugMode) print('SUCCESS!!!\tDownload URL: $urlDownload');

      firestoreRef.collection('files').doc().set({
        'file_id': newFileToUpload!.hashCode,
        'file_name': newFileToUpload!.name,
        'file_size':
            '${(newFileToUpload!.size / 1000000).toStringAsFixed(2)} MB', //TODO: Improve byte conversion
        'file_type': newFileToUpload!.extension,
        'download_url': urlDownload
      });
    } on Exception catch (e) {
      if (kDebugMode) print(e);
      // return;
    }
  }

  void saveJobApplication() {
    try {
      final firestoreRef =
          FirebaseFirestore.instance.collection('applications');

      //Firestore data upload
      firestoreRef.doc().set({
        'job_doc_id': widget.docId!,
        'job_id': jobId,
        'job_title': jobTitle,
        'full_name': fullNameController.text,
        'email_address':
            useRegisteredEmailCB.value ? jobseekerEmail : emailController.text,
        'contact_number': phoneController.text,
        'additional_info': additionalInfoController.text,
        'desired_start_date': startDateController.text,
        'desired_salary': desiredSalaryController.text,
        'employer_id': widget.employerId!,
        'jobseeker_id': UserAuth().currentUser!.uid.toString(),
        'files': fileIds,
        'status': 'Pending',
        'company_name': companyName,
        'company_address': companyAddress,
      });
    } catch (e) {
      if (kDebugMode) print(e);
    }
  }

  Widget buildUploadProgress() {
    return StreamBuilder<TaskSnapshot>(
        stream: uploadTask?.snapshotEvents,
        builder: ((context, snapshot) {
          if (snapshot.hasData) {
            final data = snapshot.data!;
            double progress = data.bytesTransferred / data.totalBytes;
            return progress == 1
                ? Container(width: 0)
                : Padding(
                    padding: EdgeInsets.symmetric(
                        vertical: space12, horizontal: space8),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        NunitoTextWidget(
                            text: progress != 1
                                ? 'Uploading file...'
                                : 'Upload complete!',
                            size: fontLabel,
                            color: darkBlue),
                        y4,
                        Row(
                          children: [
                            Expanded(
                                flex: 3,
                                child: ClipRRect(
                                  borderRadius: BorderRadius.all(
                                      Radius.circular(space20)),
                                  child: LinearProgressIndicator(
                                    value: progress,
                                    backgroundColor: softBlue,
                                    color: darkBlue,
                                  ),
                                )),
                            Expanded(
                                flex: 1,
                                child: Padding(
                                  padding:
                                      EdgeInsets.symmetric(horizontal: space10),
                                  child: NunitoTextWidget(
                                      text:
                                          '${(100 * progress).roundToDouble()}%',
                                      size: fontBody,
                                      color: darkBlue),
                                ))
                          ],
                        )
                      ],
                    ),
                  );
          } else {
            return Container(
              width: 0,
            );
          }
        }));
  }

  Future<ListResult> listFilesFromStorage() async {
    final path = 'files/${UserAuth().currentUser!.uid}/';
    final results = await FirebaseStorage.instance.ref(path).listAll();
    for (var ref in results.items) {
      if (kDebugMode) print('Found file: $ref');
    }
    return results;
  }

  Widget _errorMessage() => Align(
        alignment: Alignment.topLeft,
        child: Padding(
          padding: EdgeInsets.symmetric(vertical: space20),
          child: Container(
            padding: pad12,
            decoration: BoxDecoration(
                borderRadius: bRadius18, color: Colors.red.shade100),
            child: NunitoTextWidget(
                text: errorMessage!,
                size: fontLabel,
                isBold: true,
                color: Colors.red.shade700),
          ),
        ),
      );

  Widget buildCompleted() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(
          Icons.cloud_done_rounded,
          color: midBlue,
          size: 120,
        ),
        NunitoTextWidget(
            text: "Success!\nYou're Application was sent.",
            size: fontSubtitle,
            isBold: true,
            isCenter: true,
            color: midBlue),
        y10,
        NunitoTextWidget(
            text:
                "You can monitor your progress\nthrough the 'My Applications' Tab.",
            size: fontLabel,
            isBold: true,
            isCenter: true,
            color: grey),
        Padding(
          padding: pad20,
          child: CustomButtonWidget(
              label: 'Return to Job Post',
              isFontBold: true,
              backgroundColor: darkBlue,
              onTap: (() => Navigator.of(super.context).pop())),
        )
      ],
    );
  }

  List<Step> getSteps() => [
        Step(
            state: currentStep > 0 ? StepState.complete : StepState.indexed,
            isActive: currentStep >= 0,
            title: const Text('Details'),
            content: Column(
              children: [
                y20,
                TextfieldWidget(
                  labelText: 'Full Name',
                  controller: fullNameController,
                  colorTheme: blueTheme,
                ),
                y20,
                useRegisteredEmailCB.value
                    ? Container(
                        width: 0,
                      )
                    : TextfieldWidget(
                        labelText: 'E-mail address',
                        controller: emailController,
                        colorTheme: blueTheme,
                        textInputType: TextInputType.emailAddress,
                      ),
                CheckboxListTile(
                    title: PoppinsTextWidget(
                        text: useRegisteredEmailCB.title,
                        size: fontBody,
                        color: grey),
                    value: useRegisteredEmailCB.value,
                    onChanged: (value) {
                      getJobseekerEmail();
                      setState(() {
                        useRegisteredEmailCB.value = value!;
                        if (kDebugMode) {
                          print(
                              'Use registered e-mail? -> ${useRegisteredEmailCB.value}');
                        }
                        ;
                      });
                    }),
                y20,
                TextfieldWidget(
                  labelText: 'Contact Number',
                  controller: phoneController,
                  colorTheme: blueTheme,
                  textInputType: TextInputType.phone,
                ),
                Divider(height: space40),
                TextfieldWidget(
                  labelText: 'Desired Start Date',
                  controller: startDateController,
                  colorTheme: blueTheme,
                  textInputType: TextInputType.datetime,
                ),
                y8,
                Align(
                  alignment: Alignment.centerLeft,
                  child: NunitoTextWidget(
                      text:
                          'Examples:\n\t- 1-1-2024\n\t- 1 Jan 2024\n\t- 1/1/2024',
                      size: fontBody,
                      color: grey),
                ),
                y20,
                TextfieldWidget(
                  labelText: 'Desired Salary or Pay (You may specify)',
                  controller: desiredSalaryController,
                  colorTheme: blueTheme,
                ),
                y8,
                Align(
                  alignment: Alignment.centerLeft,
                  child: NunitoTextWidget(
                      text:
                          'Examples:\n\t- RM 130/hr.\n\t- RM 900 per week.\n\t- RM 50,000 yearly.',
                      size: fontBody,
                      color: grey),
                ),
                (errorMessage != '' && errorMessage != null)
                    ? _errorMessage()
                    : Container(
                        width: 0,
                      ),
                Container(
                  height: space40 * 3,
                )
              ],
            )),
        Step(
            state: currentStep > 1 ? StepState.complete : StepState.indexed,
            isActive: currentStep >= 1,
            title: const Text('Files'),
            content: Column(
              children: [
                y10,
                Padding(
                    padding: EdgeInsets.symmetric(vertical: space20),
                    child: buildFilesStreamBuilder()),
                /* ListView.builder(
                                itemCount: fileIds!.length,
                                itemBuilder: (context, index) {
                                  return Text(fileNames![index]);
                                })), */
                uploadTask == null
                    ? Container(
                        width: 0,
                      )
                    : buildUploadProgress(),
                CustomButtonWidget(
                  label: 'Upload New File',
                  isFontBold: true,
                  onTap: () async {
                    await selectFile();
                    uploadFile();
                    // filesToUpload.addAll(newFileToUpload); //TODO
                  },
                  icon: Icons.upload_file_rounded,
                  backgroundColor: darkBlue,
                ),
                Padding(
                  padding: pad10,
                  child: NunitoTextWidget(
                    text:
                        'Do note that newly-uploaded files will be added to your File Storage. If you wish to do so, you may delete them later in Your Files.',
                    size: fontLabel,
                    color: grey,
                    isCenter: true,
                    isBold: true,
                  ),
                ),
                buildAttachments(),
                (errorMessage != '' && errorMessage != null)
                    ? _errorMessage()
                    : Container(
                        width: 0,
                      )
              ],
            )),
        Step(
            state: currentStep > 2 ? StepState.complete : StepState.indexed,
            isActive: currentStep >= 2,
            title: const Text('Extra Info'),
            content: Column(
              children: [
                y20,
                TextfieldWidget(
                  labelText: 'Additional Information (Optional)',
                  controller: additionalInfoController,
                  textInputType: TextInputType.multiline,
                  colorTheme: blueTheme,
                ),
                y8,
                Align(
                  alignment: Alignment.topLeft,
                  child: NunitoTextWidget(
                    text:
                        'Character limit: ${(300 - RegExp(r"\w+(\'\w+)?").allMatches(additionalInfoController.text).length)}',
                    size: fontLabel,
                    color: grey,
                    isBold: true,
                  ),
                ),
                (errorMessage != '' && errorMessage != null)
                    ? _errorMessage()
                    : Container(
                        width: 0,
                      )
              ],
            )),
      ];

  Widget buildStepper() {
    return Theme(
      data: Theme.of(super.context)
          .copyWith(colorScheme: ColorScheme.light(primary: midBlue)),
      child: Stepper(
        physics: const ClampingScrollPhysics(),
        type: StepperType.horizontal,
        elevation: 1,
        steps: getSteps(),
        currentStep: currentStep,
        // onStepTapped: (step) => setState(() => currentStep = step),
        onStepCancel: () {
          currentStep == 0
              ? Navigator.of(super.context).pop()
              : setState(() {
                  currentStep -= 1;
                  (errorMessage != null || errorMessage != '')
                      ? errorMessage = ''
                      : null;
                });
        },
        onStepContinue: () {
          final isLastStep = currentStep == getSteps().length - 1;
          if (isLastStep) {
            if (additionalInfoController.text.characters.length > 300) {
              if (kDebugMode) {
                print(additionalInfoController.text.characters.length);
              }
              setState(() {
                errorMessage =
                    "Oops! You've exceeded the character limit!\nPlease use less characters to meet the quota.";
              });
            } else {
              //currentStep == 2
              //Job Application Completed
              saveJobApplication();
              if (kDebugMode) print('Job Application submitted successfully!');

              setState(() {
                (errorMessage != null || errorMessage != '')
                    ? errorMessage = ''
                    : null;
                isCompleted = true;
              });
            }
          } else if (currentStep == 1 && newFileToUpload != null) {
            //TODO: File upload (or selection)
          } else if (currentStep == 0 &&
              (fullNameController.text.isEmpty ||
                  (emailController.text.isEmpty &&
                      !useRegisteredEmailCB.value) ||
                  phoneController.text.isEmpty ||
                  desiredSalaryController.text.isEmpty ||
                  startDateController.text.isEmpty)) {
            setState(() {
              errorMessage = 'Please fill in all the textfields.';
            });
          } else if (currentStep == 0 &&
              (!emailController.text.contains('@') ||
                  !emailController.text.contains('.')) &&
              !useRegisteredEmailCB.value) {
            setState(() {
              errorMessage = 'Please enter a valid e-mail address.';
            });
          } else {
            setState(() {
              currentStep += 1;
              (errorMessage != null || errorMessage != '')
                  ? errorMessage = ''
                  : null;
            });
          }
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (kDebugMode) print("Job Post ID: ${widget.docId}");
    return Material(
      child: Column(
        children: [
          y20,
          PoppinsTextWidget(
            text: 'Submit Job Application'.toUpperCase(),
            size: fontTitle,
            isBold: true,
            color: darkBlue,
          ),
          Divider(
            height: space30,
          ),
          Expanded(child: isCompleted ? buildCompleted() : buildStepper()),
        ],
      ),
    );
  }

  Stream<QuerySnapshot> getFileSnapshotsFromFirestore() {
    final snapshots = FirebaseFirestore.instance
        .collection('users')
        .doc(UserAuth().currentUser!.uid)
        .collection('files')
        .snapshots();
    return snapshots;
  }

  Widget buildFilesStreamBuilder() {
    // return StatefulBuilder(builder: (context, innerState) {
    return StreamBuilder<QuerySnapshot>(
        stream: getFileSnapshotsFromFirestore(),
        builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(color: darkBlue),
            );
          }
          if (snapshot.hasError) {
            return Center(
              child: NunitoTextWidget(
                  text: 'Oops! Something went wrong.\nTry refreshing',
                  size: fontLabel,
                  color: dark),
            );
          }
          final data = snapshot.requireData;
          return Container(
            padding: pad10,
            decoration: BoxDecoration(
                // border: Border.all(color: darkBlue,
                //  width: 1),
                borderRadius: bRadius12,
                color: silver),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(vertical: space8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      NunitoTextWidget(
                          text: 'Select files (${fileIds.length}/4)',
                          size: fontHeader,
                          isBold: true,
                          color: darkBlue),
                      IconButton(
                          onPressed: () {
                            setState(() {});
                          },
                          icon: Icon(
                            Icons.refresh,
                            color: darkBlue,
                          ))
                    ],
                  ),
                ),
                SizedBox(
                  height: 330,
                  child: ListView.builder(
                      scrollDirection: Axis.vertical,
                      itemCount: data.size,
                      itemBuilder: (context, index) {
                        // double totalSize = 0;
                        // double size;
                        // for (var i = 0; i < data.size; i++) {
                        //   size = double.parse(
                        //       data.docs[i]['file_size'].toString().split(' ')[0]);
                        //   totalSize += size;
                        // }
                        // updateUsedFileStorage(totalSize);
                        return
                            // buildSingleCheckBox(
                            //     CheckBoxState(title: data.docs[index]['file_name']),
                            //     data.docs[index]['file_type'],
                            //     data.docs[index]['file_size']);
                            Container(
                          margin: EdgeInsets.only(bottom: space12),
                          padding: pad20,
                          decoration: BoxDecoration(
                              color: midBlue, borderRadius: bRadius18),
                          child: Column(children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                // PoppinsTextWidget(
                                //   text: '${data.docs[index]['file_type']}'
                                //       .toString()
                                //       .toUpperCase(),
                                //   size: fontHeader,
                                //   color: light,
                                //   isBold: true,
                                // ),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    SizedBox(
                                      width: 145,
                                      child: NunitoTextWidget(
                                        text: data.docs[index]['file_name'],
                                        size: fontLabel,
                                        color: light,
                                        isBold: true,
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                    SizedBox(
                                      width: 145,
                                      child: PoppinsTextWidget(
                                        text: data.docs[index]['file_type']
                                            .toString()
                                            .toUpperCase(),
                                        size: fontBody,
                                        color: light,
                                        // isBold: true,
                                      ),
                                    ),
                                    SizedBox(
                                      width: 145,
                                      child: NunitoTextWidget(
                                        text: data.docs[index]['file_size'],
                                        size: fontBody,
                                        color: light,
                                      ),
                                    ),
                                  ],
                                ),
                                IconButton(
                                    onPressed: () {
                                      if (fileCounter < 4) {
                                        setState(() {
                                          // // !checkSelectedFiles();
                                          // filesSelected[4 - selectableFiles] =
                                          //     value!;

                                          // checkboxes[fileCounter].value =
                                          //     value!;
                                          fileIds.add(data.docs[index].id);
                                          fileNames.add(
                                              data.docs[index]['file_name']);
                                          selectableFiles--;
                                          fileCounter++;
                                        });
                                        if (kDebugMode) {
                                          print(fileIds);
                                          print(fileNames);
                                          print(
                                              'Selected files: $fileCounter \ncheckboxes[$fileCounter]: ${checkboxes[fileCounter].value}');
                                        }

                                        // print(
                                        //     'filesSelected[${4 - selectableFiles}]: ${filesSelected[4 - selectableFiles]}');
                                      } else {
                                        // ScaffoldMessenger.of(context)
                                        //     .showSnackBar(SnackBar(
                                        //   content: const Text(
                                        //       'Maximum number of files selected (4).'),
                                        //   backgroundColor: Colors.red.shade400,
                                        //   duration: const Duration(seconds: 7),
                                        // ));
                                        showDialog(
                                            context: context,
                                            builder: (context) => AlertDialog(
                                                  title: PoppinsTextWidget(
                                                    text: 'ERROR',
                                                    size: fontHeader,
                                                    color: dark,
                                                    isBold: true,
                                                  ),
                                                  content: PoppinsTextWidget(
                                                      text:
                                                          "You've already reached the maximum number of file attachments (4).\n\nPlease remove or replace any unwanted attachments.",
                                                      size: fontLabel,
                                                      color: dark),
                                                  actionsAlignment:
                                                      MainAxisAlignment
                                                          .spaceEvenly,
                                                  actions: [
                                                    TextButton(
                                                        onPressed: () {
                                                          Navigator.of(context)
                                                              .pop();
                                                        },
                                                        child:
                                                            PoppinsTextWidget(
                                                                text: 'OK',
                                                                isBold: true,
                                                                size: fontLabel,
                                                                color: dark)),
                                                  ],
                                                ));
                                        if (kDebugMode) {
                                          print(
                                              'max no. of files (4) already selected.');
                                        }
                                      }
                                    },
                                    icon:
                                        Icon(Icons.add_rounded, color: light)),
                                // Checkbox(
                                //   value: checkboxes[fileCounter].value,
                                //   onChanged: ((value) {
                                //   }),
                                // ),
                              ],
                            ),
                          ]),
                        );
                      }),
                ), //My name is roger and I work in a neighbourhood clinic. I would like to discover more opportunities in the field of medicine if you'd be willing to have me.
              ],
            ),
          );
        });
    // });
  }

  Widget buildAttachments() {
    return Padding(
      padding: EdgeInsets.only(top: space10),
      child: Container(
        padding: pad12,
        decoration: BoxDecoration(borderRadius: bRadius20, color: silver),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Padding(
              padding: pad8,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  PoppinsTextWidget(
                    text: 'Attached Files',
                    size: fontSubheader,
                    color: grey,
                    isBold: true,
                  ),
                  Row(
                    children: [
                      IconButton(
                          tooltip: 'Refresh',
                          onPressed: () {
                            setState(() {});
                          },
                          icon: Icon(Icons.refresh_rounded, color: grey)),
                      x10,
                      IconButton(
                          onPressed: () {
                            setState(() {
                              selectableFiles = 4;
                              fileCounter = 0;
                              fileIds = [];
                              fileNames = [];
                            });
                          },
                          tooltip: 'Delete All',
                          icon: const Icon(Icons.delete_sweep_rounded,
                              color: Colors.redAccent)),
                    ],
                  )
                ],
              ),
            ),
            Divider(
              height: space10,
            ),
            /* fileIds.isEmpty
                ? PoppinsTextWidget(
                    isCenter: true,
                    text: 'Nothing here.',
                    size: fontLabel,
                    color: grey)
                :  */
            SizedBox(
              height: 250,
              child: ListView.builder(
                  scrollDirection: Axis.vertical,
                  itemCount: fileIds.length,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: EdgeInsets.only(bottom: space20),
                      child: Container(
                        padding: pad20,
                        decoration: BoxDecoration(
                            borderRadius: bRadius20, color: light),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            PoppinsTextWidget(
                                text: fileNames[index],
                                size: fontLabel,
                                color: dark),
                            IconButton(
                                onPressed: () {
                                  setState(() {
                                    selectableFiles++;
                                    fileCounter--;
                                    fileIds.removeAt(index);
                                    fileNames.removeAt(index);
                                  });
                                },
                                tooltip: 'Remove',
                                icon: const Icon(
                                  Icons.clear,
                                  color: Colors.redAccent,
                                ))
                          ],
                        ),
                      ),
                    );
                  }),
            )
          ],
        ),
      ),
    );
  }

  Widget buildSingleCheckBox(CheckBoxState checkbox /* <-- fileName */,
      String fileType, String fileSize) {
    return CheckboxListTile(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 145,
              child: NunitoTextWidget(
                text: checkbox.title,
                size: fontLabel,
                color: darkBlue,
                isBold: true,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            SizedBox(
              width: 145,
              child: PoppinsTextWidget(
                text: fileType.toUpperCase(),
                size: fontBody,
                color: darkBlue,
                // isBold: true,
              ),
            ),
            SizedBox(
              width: 145,
              child: NunitoTextWidget(
                text: fileSize.toUpperCase(),
                size: fontBody,
                color: darkBlue,
              ),
            ),
          ],
        ),
        activeColor: midBlue,
        tileColor: darkBlue,
        value: checkbox.value,
        onChanged: (value) {
          setState(() {
            checkbox.value = value!;
          });
        });
  }
}
